<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:jms="http://www.springframework.org/schema/jms"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
     http://www.springframework.org/schema/context  
     http://www.springframework.org/schema/context/spring-context-3.0.xsd  
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
    http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd">  
   
    <context:component-scan base-package="com.fosun.channel.mq." />
  	
    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->  
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
        <property name="connectionFactory" ref="connectionFactory"/>    <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
        <property name="deliveryMode" value="2" />  <!-- 发送模式  DeliveryMode.NON_PERSISTENT=1:非持久 ; DeliveryMode.PERSISTENT=2:持久 ；PERSISTENT方式下的JMS Provider会对消息持久化在内存中-->
        <property name="receiveTimeout" value="35000"/> <!-- 连接超时时间30S -->
    </bean>
	
	<!-- 消息中介 -->
	<bean id="connectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
		destroy-method="stop">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="${mq_url}" />
				<!-- <property name="closeTimeout" value="0"></property> -->
				<!-- <property name="useAsyncSend" value="true"></property> -->
			</bean>
		</property>
		<property name="maxConnections" value="${mq.maxConnections}"></property>
	</bean>

    <!--这个监控队列(response队列)，配置对方系统的返回队列为自己系统的监控队列-->
    <bean id="myDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <!-- 如果interface要单独部署，那么这里可以设置监听多个队列，以","分隔即可，或者下边方法中获取所有队列
	        <constructor-arg>
	            <value>reqQueue</value> 
	        </constructor-arg>  
         -->
        <constructor-arg ref="getMyQueue"/>
    </bean>
    <!-- 反射读取方法返回的队列名称 -->
    <bean id="getMyQueue" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	      <property name="targetObject">
	      		<ref local="spu" />
	      </property>
	      <property name="targetMethod">
   				<value>getSysQueue</value>
	      </property>
    </bean>
    
    <!-- Interface接口统一同步获取工具，此处用于获取当前系统需要监听的队列名称 -->
    <bean id="spu" class="com.fosun.channel.util.ServiceMonitorUtil" />
    
    <!-- 服务端消息监听器 -->  
    <!-- <bean id="serverMessageListener" class="com.fosun.channel.mq.listener.DmzServerMessageListener"/>  -->
    <bean id="serverMessageListener" class="com.fosun.channel.mq.listener.ServerMessageListener"/>
    <!-- 服务端消息监听容器 -->  
    <bean id="jmsContainer"  
        class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        <property name="connectionFactory" ref="connectionFactory" />  
        <property name="destination" ref="myDestination" />  
        <property name="messageListener" ref="serverMessageListener" />  
        <property name="receiveTimeout" value="35000"/>
		<!-- 设置消费者数量 -->
		<property name="concurrency" value="${mq_concurrency}"></property>
    </bean>
</beans>
